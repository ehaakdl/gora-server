import org.yaml.snakeyaml.Yaml

// import org.yaml.snakeyaml.Yaml 이것만 추가한다고해서 build.gradle 파일에서 사용못함
// 아래 코드가 추가되어야함
buildscript{
    dependencies{
        classpath("org.yaml:snakeyaml:2.2")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'org.gora'
version = '1.0.0'

def yaml = new Yaml()
def applicationYaml = yaml.load(new FileReader(project.rootProject.file('src/main/resources/application.yml')))
def udpServerPort = applicationYaml['app']['udp_server_port'].toString()
def udpClientPort = applicationYaml['app']['udp_client_port'].toString()
def tcpServerPort = applicationYaml['app']['tcp_server_port'].toString()

bootJar{
    archivesBaseName = rootProject.name
    archiveFileName = rootProject.name + '-' + version + '.jar'
    archiveVersion = version
}

java{
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'


//  utils
    implementation 'com.google.protobuf:protobuf-java:3.24.4'
    implementation 'net.jodah:expiringmap:0.5.11'
	implementation 'org.yaml:snakeyaml:2.2'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.10.7'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'io.netty:netty-all:4.1.93.Final'

    //	querydsl
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	implementation "com.querydsl:querydsl-apt:5.0.0:jakarta"
	implementation "com.querydsl:querydsl-core:5.0.0"

	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jib{
	from {
		image='openjdk:17-ea-slim-buster'
        // todo 멀티 플랫폼 지원 안되서 임시로 arm64 명시
        // 다른 아키텍쳐인 경우 이렇게 지정해야함
        // 기본값은 adm64, linux
        // platforms {
        // 	platform {
        //     	architecture = "arm64"
        //         os = "linux"
        //     }
        // }
	}

	to {
		image=rootProject.name
		tags=[version]
	}

	def appEnvProp = new Properties()
	file(".docker/app.env").withInputStream { appEnvProp .load(it) }
	
	def appEnvMap = appEnvProp.entrySet().collectEntries { entry ->
    [(entry.key): entry.value]
	}
    
    def jibEnvProp = new Properties()
	file(".docker/jib.env").withInputStream { jibEnvProp .load(it) }
	
	def jibEnvMap = jibEnvProp.entrySet().collectEntries { entry ->
    [(entry.key): entry.value]
	}

    def remoteDebugPort = jibEnvMap['REMOTE_DEBUG_PORT']
    def minHeapSize = jibEnvMap['MIN_HEAP']
    def maxHeapSize = jibEnvMap['MAX_HEAP']
    container {
		creationTime='USE_CURRENT_TIMESTAMP'
		environment=appEnvMap
		jvmFlags = [
            '-Duser.timezone=GMT',
            '-Xms'+ minHeapSize,
            '-Xmx'+ maxHeapSize,
            '-XX:HeapDumpPath=/logs/file.hprof',
            '-XX:+HeapDumpOnOutOfMemoryError',
            '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:'+ remoteDebugPort
        ]
        volumes=['/logs']
        mainClass = "org.gora.server.ServerApplication"
		ports = [remoteDebugPort, udpServerPort, udpServerPort, tcpServerPort]
	}
}

tasks.named('test') {
    useJUnitPlatform()
}